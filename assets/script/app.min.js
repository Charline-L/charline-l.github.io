class Connect {

    constructor() {

        console.log('in connect')
    }
}
class Index {
    constructor() {

        this.isConnected = false

        this.init()
    }

    init(){

        console.log('this.isConnected', this.isConnected)
        document.location.href = this.isConnected ? '/pages/home' : '/pages/connect'
    }

}
class Register {

    constructor() {

        this.$form = document.querySelector('#registerForm')

        this.init()
    }

    init() {

        this.bindEvents()

    }

    bindEvents() {

        // submit form
        this.$form.addEventListener('submit', this.checkBeforeSubmit.bind(this))
    }

    checkBeforeSubmit(e) {

        // prevent default
        e.preventDefault()

        // récupère nos données
        const data = serialize(this.$form)

        // créer la requete
        new Request({
            method: 'POST',
            url: 'auth/register',
            success: this.success.bind(this),
            error: this.error.bind(this),
            data: data
        })
    }

    success(succes) {
        console.log('send', succes)
        document.location.href = '/pages/home'
    }

    error(error) {
        console.log('error', error)
    }
}
class RegisterChild {

    constructor() {

        this.init()
    }

    init() {

        console.log('this init')
    }

}
class Request {

    constructor(props) {

        this.method = props.method
        this.url = props.url
        this.success = props.success
        this.error = props.error || function(error) {console.log(error)}
        this.data = props.data

        this.init()
    }

    init() {
        const thisRegister = this

        this.req = new XMLHttpRequest()

        this.req.onreadystatechange = function(event) {

            if (this.readyState === XMLHttpRequest.DONE) {

                if (this.status === 200) {

                    const response = JSON.parse(this.responseText)

                    if (response.status === "success") thisRegister.success(response.message)
                    else thisRegister.error(response.message)
                }

                else {
                    console.log("Status de la réponse: %d (%s)", this.status, this.statusText)
                    thisRegister.error()
                }
            }
        }

        this.req.open(this.method, `http://192.168.1.75:3003/${this.url}`, true)
        this.req.setRequestHeader("Content-type","application/x-www-form-urlencoded");
        this.req.send(this.data)
    }
}
class app {

    constructor() {

        this.init()
    }

    init() {

        this.detectPage()
    }

    detectPage() {

        const pageClass = document.getElementById('page').getAttribute('data-page')
        eval(`new ${pageClass}()`);
    }
}

new app()